{"ast":null,"code":"/*\n    \n*/\nvar ParsedComponents = require('../../result').ParsedComponents;\n\nvar Refiner = require('../refiner').Refiner;\n\nvar PATTERN = new RegExp(\"^\\\\s*(T|at|after|before|on|of|,|-)?\\\\s*$\");\n\nvar isDateOnly = exports.isDateOnly = function (result) {\n  return !result.start.isCertain('hour');\n};\n\nvar isTimeOnly = exports.isTimeOnly = function (result) {\n  return !result.start.isCertain('month') && !result.start.isCertain('weekday');\n};\n\nvar isAbleToMerge = exports.isAbleToMerge = function (text, prevResult, curResult) {\n  var textBetween = text.substring(prevResult.index + prevResult.text.length, curResult.index);\n  return textBetween.match(PATTERN);\n};\n\nvar mergeDateTimeComponent = exports.mergeDateTimeComponent = function (dateComponent, timeComponent) {\n  var dateTimeComponent = dateComponent.clone();\n\n  if (timeComponent.isCertain('hour')) {\n    dateTimeComponent.assign('hour', timeComponent.get('hour'));\n    dateTimeComponent.assign('minute', timeComponent.get('minute'));\n    dateTimeComponent.assign('second', timeComponent.get('second'));\n  } else {\n    dateTimeComponent.imply('hour', timeComponent.get('hour'));\n    dateTimeComponent.imply('minute', timeComponent.get('minute'));\n    dateTimeComponent.imply('second', timeComponent.get('second'));\n  }\n\n  if (timeComponent.isCertain('meridiem')) {\n    dateTimeComponent.assign('meridiem', timeComponent.get('meridiem'));\n  } else if (timeComponent.get('meridiem') !== undefined && dateTimeComponent.get('meridiem') === undefined) {\n    dateTimeComponent.imply('meridiem', timeComponent.get('meridiem'));\n  }\n\n  if (dateTimeComponent.get('meridiem') == 1 && dateTimeComponent.get('hour') < 12) {\n    if (timeComponent.isCertain('hour')) {\n      dateTimeComponent.assign('hour', dateTimeComponent.get('hour') + 12);\n    } else {\n      dateTimeComponent.imply('hour', dateTimeComponent.get('hour') + 12);\n    }\n  }\n\n  return dateTimeComponent;\n};\n\nfunction mergeResult(text, dateResult, timeResult) {\n  var beginDate = dateResult.start;\n  var beginTime = timeResult.start;\n  var beginDateTime = mergeDateTimeComponent(beginDate, beginTime);\n\n  if (dateResult.end != null || timeResult.end != null) {\n    var endDate = dateResult.end == null ? dateResult.start : dateResult.end;\n    var endTime = timeResult.end == null ? timeResult.start : timeResult.end;\n    var endDateTime = mergeDateTimeComponent(endDate, endTime);\n\n    if (dateResult.end == null && endDateTime.date().getTime() < beginDateTime.date().getTime()) {\n      // Ex. 9pm - 1am\n      if (endDateTime.isCertain('day')) {\n        endDateTime.assign('day', endDateTime.get('day') + 1);\n      } else {\n        endDateTime.imply('day', endDateTime.get('day') + 1);\n      }\n    }\n\n    dateResult.end = endDateTime;\n  }\n\n  dateResult.start = beginDateTime;\n  var startIndex = Math.min(dateResult.index, timeResult.index);\n  var endIndex = Math.max(dateResult.index + dateResult.text.length, timeResult.index + timeResult.text.length);\n  dateResult.index = startIndex;\n  dateResult.text = text.substring(startIndex, endIndex);\n\n  for (var tag in timeResult.tags) {\n    dateResult.tags[tag] = true;\n  }\n\n  dateResult.tags['ENMergeDateAndTimeRefiner'] = true;\n  return dateResult;\n}\n\nexports.Refiner = function ENMergeDateTimeRefiner() {\n  Refiner.call(this);\n\n  this.refine = function (text, results, opt) {\n    if (results.length < 2) return results;\n    var mergedResult = [];\n    var currResult = null;\n    var prevResult = null;\n\n    for (var i = 1; i < results.length; i++) {\n      currResult = results[i];\n      prevResult = results[i - 1];\n\n      if (isDateOnly(prevResult) && isTimeOnly(currResult) && isAbleToMerge(text, prevResult, currResult)) {\n        prevResult = mergeResult(text, prevResult, currResult);\n        currResult = results[i + 1];\n        i += 1;\n      } else if (isDateOnly(currResult) && isTimeOnly(prevResult) && isAbleToMerge(text, prevResult, currResult)) {\n        prevResult = mergeResult(text, currResult, prevResult);\n        currResult = results[i + 1];\n        i += 1;\n      }\n\n      mergedResult.push(prevResult);\n    }\n\n    if (currResult != null) {\n      mergedResult.push(currResult);\n    }\n\n    return mergedResult;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}