{"ast":null,"code":"/*\r\n\r\n\r\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar ParsedComponents = require('../../result').ParsedComponents;\n\nvar FIRST_REG_PATTERN = new RegExp(\"(^|\\\\s|T)\" + \"(?:(?:[àa])\\\\s*)?\" + \"(\\\\d{1,2}(?:h)?|midi|minuit)\" + \"(?:\" + \"(?:\\\\.|\\\\:|\\\\：|h)(\\\\d{1,2})(?:m)?\" + \"(?:\" + \"(?:\\\\:|\\\\：|m)(\\\\d{0,2})(?:s)?\" + \")?\" + \")?\" + \"(?:\\\\s*(A\\\\.M\\\\.|P\\\\.M\\\\.|AM?|PM?))?\" + \"(?=\\\\W|$)\", 'i');\nvar SECOND_REG_PATTERN = new RegExp(\"^\\\\s*\" + \"(\\\\-|\\\\–|\\\\~|\\\\〜|[àa]|\\\\?)\\\\s*\" + \"(\\\\d{1,2}(?:h)?)\" + \"(?:\" + \"(?:\\\\.|\\\\:|\\\\：|h)(\\\\d{1,2})(?:m)?\" + \"(?:\" + \"(?:\\\\.|\\\\:|\\\\：|m)(\\\\d{1,2})(?:s)?\" + \")?\" + \")?\" + \"(?:\\\\s*(A\\\\.M\\\\.|P\\\\.M\\\\.|AM?|PM?))?\" + \"(?=\\\\W|$)\", 'i');\nvar HOUR_GROUP = 2;\nvar MINUTE_GROUP = 3;\nvar SECOND_GROUP = 4;\nvar AM_PM_HOUR_GROUP = 5;\n\nexports.Parser = function FRTimeExpressionParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return FIRST_REG_PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    // This pattern can be overlaped Ex. [12] AM, 1[2] AM\n    if (match.index > 0 && text[match.index - 1].match(/\\w/)) return null;\n    var refMoment = moment(ref);\n    var result = new ParsedResult();\n    result.ref = ref;\n    result.index = match.index + match[1].length;\n    result.text = match[0].substring(match[1].length);\n    result.tags['FRTimeExpressionParser'] = true;\n    result.start.imply('day', refMoment.date());\n    result.start.imply('month', refMoment.month() + 1);\n    result.start.imply('year', refMoment.year());\n    var hour = 0;\n    var minute = 0;\n    var meridiem = -1; // ----- Second\n\n    if (match[SECOND_GROUP] != null) {\n      var second = parseInt(match[SECOND_GROUP]);\n      if (second >= 60) return null;\n      result.start.assign('second', second);\n    } // ----- Hours\n\n\n    if (match[HOUR_GROUP].toLowerCase() == \"midi\") {\n      meridiem = 1;\n      hour = 12;\n    } else if (match[HOUR_GROUP].toLowerCase() == \"minuit\") {\n      meridiem = 0;\n      hour = 0;\n    } else {\n      hour = parseInt(match[HOUR_GROUP]);\n    } // ----- Minutes\n\n\n    if (match[MINUTE_GROUP] != null) {\n      minute = parseInt(match[MINUTE_GROUP]);\n    } else if (hour > 100) {\n      minute = hour % 100;\n      hour = parseInt(hour / 100);\n    }\n\n    if (minute >= 60) {\n      return null;\n    }\n\n    if (hour > 24) {\n      return null;\n    }\n\n    if (hour >= 12) {\n      meridiem = 1;\n    } // ----- AM & PM\n\n\n    if (match[AM_PM_HOUR_GROUP] != null) {\n      if (hour > 12) return null;\n      var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n\n      if (ampm == \"a\") {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      }\n\n      if (ampm == \"p\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    }\n\n    result.start.assign('hour', hour);\n    result.start.assign('minute', minute);\n\n    if (meridiem >= 0) {\n      result.start.assign('meridiem', meridiem);\n    } // ==============================================================\n    //                  Extracting the 'to' chunk\n    // ==============================================================\n\n\n    match = SECOND_REG_PATTERN.exec(text.substring(result.index + result.text.length));\n\n    if (!match) {\n      // Not accept number only result\n      if (result.text.match(/^\\d+$/)) {\n        return null;\n      }\n\n      return result;\n    } // Pattern \"YY.YY -XXXX\" is more like timezone offset\n\n\n    if (match[0].match(/^\\s*(\\+|\\-)\\s*\\d{3,4}$/)) {\n      return result;\n    }\n\n    if (result.end == null) {\n      result.end = new ParsedComponents(null, result.start.date());\n    }\n\n    var hour = 0;\n    var minute = 0;\n    var meridiem = -1; // ----- Second\n\n    if (match[SECOND_GROUP] != null) {\n      var second = parseInt(match[SECOND_GROUP]);\n      if (second >= 60) return null;\n      result.end.assign('second', second);\n    }\n\n    hour = parseInt(match[2]); // ----- Minute\n\n    if (match[MINUTE_GROUP] != null) {\n      minute = parseInt(match[MINUTE_GROUP]);\n      if (minute >= 60) return result;\n    } else if (hour > 100) {\n      minute = hour % 100;\n      hour = parseInt(hour / 100);\n    }\n\n    if (minute >= 60) {\n      return null;\n    }\n\n    if (hour > 24) {\n      return null;\n    }\n\n    if (hour >= 12) {\n      meridiem = 1;\n    } // ----- AM & PM\n\n\n    if (match[AM_PM_HOUR_GROUP] != null) {\n      if (hour > 12) return null;\n\n      if (match[AM_PM_HOUR_GROUP][0].toLowerCase() == \"a\") {\n        meridiem = 0;\n\n        if (hour == 12) {\n          hour = 0;\n\n          if (!result.end.isCertain('day')) {\n            result.end.imply('day', result.end.get('day') + 1);\n          }\n        }\n      }\n\n      if (match[AM_PM_HOUR_GROUP][0].toLowerCase() == \"p\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n\n      if (!result.start.isCertain('meridiem')) {\n        if (meridiem == 0) {\n          result.start.imply('meridiem', 0);\n\n          if (result.start.get('hour') == 12) {\n            result.start.assign('hour', 0);\n          }\n        } else {\n          result.start.imply('meridiem', 1);\n\n          if (result.start.get('hour') != 12) {\n            result.start.assign('hour', result.start.get('hour') + 12);\n          }\n        }\n      }\n    } else if (hour >= 12) {\n      meridiem = 1;\n    }\n\n    result.text = result.text + match[0];\n    result.end.assign('hour', hour);\n    result.end.assign('minute', minute);\n\n    if (meridiem >= 0) {\n      result.end.assign('meridiem', meridiem);\n    }\n\n    if (result.end.date().getTime() < result.start.date().getTime()) {\n      result.end.imply('day', result.end.get('day') + 1);\n    }\n\n    return result;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}