{"ast":null,"code":"/*\n\n\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar util = require('../../utils/EN');\n\nvar PATTERN = new RegExp('(\\\\W|^)' + '(next|last|past)\\\\s*' + '(' + util.INTEGER_WORDS_PATTERN + '|[0-9]+|few|half(?:\\\\s*an?)?)?\\\\s*' + '(seconds?|min(?:ute)?s?|hours?|days?|weeks?|months?|years?)(?=\\\\s*)' + '(?=\\\\W|$)', 'i');\nvar MODIFIER_WORD_GROUP = 2;\nvar MULTIPLIER_WORD_GROUP = 3;\nvar RELATIVE_WORD_GROUP = 4;\n\nexports.Parser = function ENRelativeDateFormatParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var index = match.index + match[1].length;\n    var modifier = match[MODIFIER_WORD_GROUP].toLowerCase().match(/^next/) ? 1 : -1;\n    var text = match[0];\n    text = match[0].substr(match[1].length, match[0].length - match[1].length);\n    var result = new ParsedResult({\n      index: index,\n      text: text,\n      ref: ref\n    });\n    result.tags['ENRelativeDateFormatParser'] = true;\n    var num = match[MULTIPLIER_WORD_GROUP] === undefined ? '' : match[3].toLowerCase();\n\n    if (util.INTEGER_WORDS[num] !== undefined) {\n      num = util.INTEGER_WORDS[num];\n    } else if (num === '') {\n      num = 1;\n    } else if (num.match(/few/i)) {\n      num = 3;\n    } else if (num.match(/half/i)) {\n      num = 0.5;\n    } else {\n      num = parseInt(num);\n    }\n\n    num *= modifier;\n    var date = moment(ref);\n\n    if (match[RELATIVE_WORD_GROUP].match(/day|week|month|year/i)) {\n      if (match[RELATIVE_WORD_GROUP].match(/day/i)) {\n        date.add(num, 'd');\n        result.start.assign('year', date.year());\n        result.start.assign('month', date.month() + 1);\n        result.start.assign('day', date.date());\n      } else if (match[RELATIVE_WORD_GROUP].match(/week/i)) {\n        date.add(num * 7, 'd'); // We don't know the exact date for next/last week so we imply\n        // them\n\n        result.start.imply('day', date.date());\n        result.start.imply('month', date.month() + 1);\n        result.start.imply('year', date.year());\n      } else if (match[RELATIVE_WORD_GROUP].match(/month/i)) {\n        date.add(num, 'month'); // We don't know the exact day for next/last month\n\n        result.start.imply('day', date.date());\n        result.start.assign('year', date.year());\n        result.start.assign('month', date.month() + 1);\n      } else if (match[RELATIVE_WORD_GROUP].match(/year/i)) {\n        date.add(num, 'year'); // We don't know the exact day for month on next/last year\n\n        result.start.imply('day', date.date());\n        result.start.imply('month', date.month() + 1);\n        result.start.assign('year', date.year());\n      }\n\n      return result;\n    }\n\n    if (match[RELATIVE_WORD_GROUP].match(/hour/i)) {\n      date.add(num, 'hour');\n      result.start.imply('minute', date.minute());\n      result.start.imply('second', date.second());\n    } else if (match[RELATIVE_WORD_GROUP].match(/min/i)) {\n      date.add(num, 'minute');\n      result.start.assign('minute', date.minute());\n      result.start.imply('second', date.second());\n    } else if (match[RELATIVE_WORD_GROUP].match(/second/i)) {\n      date.add(num, 'second');\n      result.start.assign('second', date.second());\n      result.start.assign('minute', date.minute());\n    }\n\n    result.start.assign('hour', date.hour());\n    result.start.assign('year', date.year());\n    result.start.assign('month', date.month() + 1);\n    result.start.assign('day', date.date());\n    return result;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}