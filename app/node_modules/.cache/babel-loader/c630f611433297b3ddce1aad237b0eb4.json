{"ast":null,"code":"/*\n\n\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar util = require('../../utils/DE');\n\nvar PATTERN = new RegExp('' + '(\\\\W|^)vor\\\\s*' + '(' + util.INTEGER_WORDS_PATTERN + '|[0-9]+|einigen|eine[rm]\\\\s*halben|eine[rm])\\\\s*' + '(sekunden?|min(?:ute)?n?|stunden?|wochen?|tag(?:en)?|monat(?:en)?|jahr(?:en)?)\\\\s*' + '(?=(?:\\\\W|$))', 'i');\nvar STRICT_PATTERN = new RegExp('' + '(\\\\W|^)vor\\\\s*' + '([0-9]+|eine(?:r|m))\\\\s*' + '(sekunden?|minuten?|stunden?|tag(?:en)?)' + '(?=(?:\\\\W|$))', 'i');\n\nexports.Parser = function DETimeAgoFormatParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return this.isStrictMode() ? STRICT_PATTERN : PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    if (match.index > 0 && text[match.index - 1].match(/\\w/)) return null;\n    var text = match[0];\n    text = match[0].substr(match[1].length, match[0].length - match[1].length);\n    index = match.index + match[1].length;\n    var result = new ParsedResult({\n      index: index,\n      text: text,\n      ref: ref\n    });\n    var num = match[2].toLowerCase();\n\n    if (util.INTEGER_WORDS[num] !== undefined) {\n      num = util.INTEGER_WORDS[num];\n    } else if (num === 'einer' || num === 'einem') {\n      num = 1;\n    } else if (num === 'einigen') {\n      num = 3;\n    } else if (/halben/.test(num)) {\n      num = 0.5;\n    } else {\n      num = parseInt(num);\n    }\n\n    var date = moment(ref);\n\n    if (/stunde|min|sekunde/i.test(match[3])) {\n      if (/stunde/i.test(match[3])) {\n        date.add(-num, 'hour');\n      } else if (/min/i.test(match[3])) {\n        date.add(-num, 'minute');\n      } else if (/sekunde/i.test(match[3])) {\n        date.add(-num, 'second');\n      }\n\n      result.start.imply('day', date.date());\n      result.start.imply('month', date.month() + 1);\n      result.start.imply('year', date.year());\n      result.start.assign('hour', date.hour());\n      result.start.assign('minute', date.minute());\n      result.start.assign('second', date.second());\n      result.tags['DETimeAgoFormatParser'] = true;\n      return result;\n    }\n\n    if (/woche/i.test(match[3])) {\n      date.add(-num, 'week');\n      result.start.imply('day', date.date());\n      result.start.imply('month', date.month() + 1);\n      result.start.imply('year', date.year());\n      result.start.imply('weekday', date.day());\n      return result;\n    }\n\n    if (/tag/i.test(match[3])) {\n      date.add(-num, 'd');\n    }\n\n    if (/monat/i.test(match[3])) {\n      date.add(-num, 'month');\n    }\n\n    if (/jahr/i.test(match[3])) {\n      date.add(-num, 'year');\n    }\n\n    result.start.assign('day', date.date());\n    result.start.assign('month', date.month() + 1);\n    result.start.assign('year', date.year());\n    return result;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}