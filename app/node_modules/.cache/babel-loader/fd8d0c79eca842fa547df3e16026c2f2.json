{"ast":null,"code":"/*\r\n\r\n\r\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar PATTERN = /(\\W|^)(maintenant|aujourd'hui|ajd|cette\\s*nuit|la\\s*veille|(demain|hier)(\\s*(matin|soir|aprem|après-midi))?|ce\\s*(matin|soir)|cet\\s*(après-midi|aprem))(?=\\W|$)/i;\n\nexports.Parser = function FRCasualDateParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var text = match[0].substr(match[1].length);\n    var index = match.index + match[1].length;\n    var result = new ParsedResult({\n      index: index,\n      text: text,\n      ref: ref\n    });\n    var refMoment = moment(ref);\n    var startMoment = refMoment.clone();\n    var lowerText = text.toLowerCase();\n\n    if (lowerText.match(/demain/)) {\n      // Check not \"Tomorrow\" on late night\n      if (refMoment.hour() > 1) {\n        startMoment.add(1, 'day');\n      }\n    }\n\n    if (lowerText.match(/hier/)) {\n      startMoment.add(-1, 'day');\n    }\n\n    if (lowerText.match(/cette\\s*nuit/)) {\n      // Normally means this coming midnight\n      result.start.imply('hour', 22);\n      result.start.imply('meridiem', 1);\n    } else if (lowerText.match(/la\\s*veille/)) {\n      result.start.imply('hour', 0);\n\n      if (refMoment.hour() > 6) {\n        startMoment.add(-1, 'day');\n      }\n    } else if (lowerText.match(/(après-midi|aprem)/)) {\n      result.start.imply('hour', 14);\n    } else if (lowerText.match(/(soir)/)) {\n      result.start.imply('hour', 18);\n    } else if (lowerText.match(/matin/)) {\n      result.start.imply('hour', 8);\n    } else if (lowerText.match(\"maintenant\")) {\n      result.start.imply('hour', refMoment.hour());\n      result.start.imply('minute', refMoment.minute());\n      result.start.imply('second', refMoment.second());\n      result.start.imply('millisecond', refMoment.millisecond());\n    }\n\n    result.start.assign('day', startMoment.date());\n    result.start.assign('month', startMoment.month() + 1);\n    result.start.assign('year', startMoment.year());\n    result.tags['FRCasualDateParser'] = true;\n    return result;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}