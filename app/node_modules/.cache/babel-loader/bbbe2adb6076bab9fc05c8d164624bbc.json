{"ast":null,"code":"/*\n\n\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar util = require('../../utils/EN');\n\nvar PATTERN = new RegExp('(\\\\W|^)' + '(within|in)\\\\s*' + '(' + util.INTEGER_WORDS_PATTERN + '|[0-9]+|an?(?:\\\\s*few)?|half(?:\\\\s*an?)?)\\\\s*' + '(seconds?|min(?:ute)?s?|hours?|days?|weeks?|months?|years?)\\\\s*' + '(?=\\\\W|$)', 'i');\nvar STRICT_PATTERN = new RegExp('(\\\\W|^)' + '(within|in)\\\\s*' + '(' + util.INTEGER_WORDS_PATTERN + '|[0-9]+|an?)\\\\s*' + '(seconds?|minutes?|hours?|days?)\\\\s*' + '(?=\\\\W|$)', 'i');\n\nexports.Parser = function ENDeadlineFormatParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return this.isStrictMode() ? STRICT_PATTERN : PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var index = match.index + match[1].length;\n    var text = match[0];\n    text = match[0].substr(match[1].length, match[0].length - match[1].length);\n    var result = new ParsedResult({\n      index: index,\n      text: text,\n      ref: ref\n    });\n    var num = match[3].toLowerCase();\n\n    if (util.INTEGER_WORDS[num] !== undefined) {\n      num = util.INTEGER_WORDS[num];\n    } else if (num === 'a' || num === 'an') {\n      num = 1;\n    } else if (num.match(/few/i)) {\n      num = 3;\n    } else if (num.match(/half/i)) {\n      num = 0.5;\n    } else {\n      num = parseInt(num);\n    }\n\n    var date = moment(ref);\n\n    if (match[4].match(/day|week|month|year/i)) {\n      if (match[4].match(/day/i)) {\n        date.add(num, 'd');\n      } else if (match[4].match(/week/i)) {\n        date.add(num * 7, 'd');\n      } else if (match[4].match(/month/i)) {\n        date.add(num, 'month');\n      } else if (match[4].match(/year/i)) {\n        date.add(num, 'year');\n      }\n\n      result.start.assign('year', date.year());\n      result.start.assign('month', date.month() + 1);\n      result.start.assign('day', date.date());\n      return result;\n    }\n\n    if (match[4].match(/hour/i)) {\n      date.add(num, 'hour');\n    } else if (match[4].match(/min/i)) {\n      date.add(num, 'minute');\n    } else if (match[4].match(/second/i)) {\n      date.add(num, 'second');\n    }\n\n    result.start.imply('year', date.year());\n    result.start.imply('month', date.month() + 1);\n    result.start.imply('day', date.date());\n    result.start.assign('hour', date.hour());\n    result.start.assign('minute', date.minute());\n    result.start.assign('second', date.second());\n    result.tags['ENDeadlineFormatParser'] = true;\n    return result;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}