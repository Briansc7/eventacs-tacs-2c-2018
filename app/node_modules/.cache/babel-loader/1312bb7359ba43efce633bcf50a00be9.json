{"ast":null,"code":"/*\n    Date format with slash \"/\" between numbers like ENSlashDateFormatParser,\n    but this parser expect year before month and date. \n    - YYYY/MM/DD\n    - YYYY-MM-DD\n    - YYYY.MM.DD\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar PATTERN = new RegExp('(\\\\W|^)' + '([0-9]{4})[\\\\-\\\\.\\\\/]([0-9]{1,2})[\\\\-\\\\.\\\\/]([0-9]{1,2})' + '(?=\\\\W|$)', 'i');\nvar YEAR_NUMBER_GROUP = 2;\nvar MONTH_NUMBER_GROUP = 3;\nvar DATE_NUMBER_GROUP = 4;\n\nexports.Parser = function ENSlashDateFormatStartWithYearParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var text = match[0].substr(match[1].length);\n    var index = match.index + match[1].length;\n    var result = new ParsedResult({\n      text: text,\n      index: index,\n      ref: ref\n    });\n    result.start.assign('year', parseInt(match[YEAR_NUMBER_GROUP]));\n    result.start.assign('month', parseInt(match[MONTH_NUMBER_GROUP]));\n    result.start.assign('day', parseInt(match[DATE_NUMBER_GROUP]));\n\n    if (moment(result.start.get('month')) > 12 || moment(result.start.get('month')) < 1 || moment(result.start.get('day')) > 31 || moment(result.start.get('day')) < 1) {\n      return null;\n    }\n\n    result.tags['ENDateFormatParser'] = true;\n    return result;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}