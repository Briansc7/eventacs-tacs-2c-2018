{"ast":null,"code":"/*\n\n\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar ParsedComponents = require('../../result').ParsedComponents;\n\nvar util = require('../../utils/ZH-Hant.js');\n\nvar patternString1 = '(?:由|從|自)?' + '(?:' + '(今|明|聽|昨|尋|琴)(早|朝|晚)|' + '(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|' + '(今|明|聽|昨|尋|琴)(?:日|天)' + '(?:[\\\\s,，]*)' + '(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?' + ')?' + '(?:[\\\\s,，]*)' + '(?:(\\\\d+|[' + Object.keys(util.NUMBER).join('') + ']+)(?:\\\\s*)(?:點|時|:|：)' + '(?:\\\\s*)' + '(\\\\d+|半|正|整|[' + Object.keys(util.NUMBER).join('') + ']+)?(?:\\\\s*)(?:分|:|：)?' + '(?:\\\\s*)' + '(\\\\d+|[' + Object.keys(util.NUMBER).join('') + ']+)?(?:\\\\s*)(?:秒)?)' + '(?:\\\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?';\nvar patternString2 = '(?:\\\\s*(?:到|至|\\\\-|\\\\–|\\\\~|\\\\〜)\\\\s*)' + '(?:' + '(今|明|聽|昨|尋|琴)(早|朝|晚)|' + '(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|' + '(今|明|聽|昨|尋|琴)(?:日|天)' + '(?:[\\\\s,，]*)' + '(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?' + ')?' + '(?:[\\\\s,，]*)' + '(?:(\\\\d+|[' + Object.keys(util.NUMBER).join('') + ']+)(?:\\\\s*)(?:點|時|:|：)' + '(?:\\\\s*)' + '(\\\\d+|半|正|整|[' + Object.keys(util.NUMBER).join('') + ']+)?(?:\\\\s*)(?:分|:|：)?' + '(?:\\\\s*)' + '(\\\\d+|[' + Object.keys(util.NUMBER).join('') + ']+)?(?:\\\\s*)(?:秒)?)' + '(?:\\\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?';\nvar FIRST_REG_PATTERN = new RegExp(patternString1, 'i');\nvar SECOND_REG_PATTERN = new RegExp(patternString2, 'i');\nvar DAY_GROUP_1 = 1;\nvar ZH_AM_PM_HOUR_GROUP_1 = 2;\nvar ZH_AM_PM_HOUR_GROUP_2 = 3;\nvar DAY_GROUP_3 = 4;\nvar ZH_AM_PM_HOUR_GROUP_3 = 5;\nvar HOUR_GROUP = 6;\nvar MINUTE_GROUP = 7;\nvar SECOND_GROUP = 8;\nvar AM_PM_HOUR_GROUP = 9;\n\nexports.Parser = function ZHHantTimeExpressionParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return FIRST_REG_PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    // This pattern can be overlaped Ex. [12] AM, 1[2] AM\n    if (match.index > 0 && text[match.index - 1].match(/\\w/)) return null;\n    var refMoment = moment(ref);\n    var result = new ParsedResult();\n    result.ref = ref;\n    result.index = match.index;\n    result.text = match[0];\n    result.tags.ZHTimeExpressionParser = true;\n    var startMoment = refMoment.clone(); // ----- Day\n\n    if (match[DAY_GROUP_1]) {\n      var day1 = match[DAY_GROUP_1];\n\n      if (day1 == '明' || day1 == '聽') {\n        // Check not \"Tomorrow\" on late night\n        if (refMoment.hour() > 1) {\n          startMoment.add(1, 'day');\n        }\n      } else if (day1 == '昨' || day1 == '尋' || day1 == '琴') {\n        startMoment.add(-1, 'day');\n      }\n\n      result.start.assign('day', startMoment.date());\n      result.start.assign('month', startMoment.month() + 1);\n      result.start.assign('year', startMoment.year());\n    } else if (match[DAY_GROUP_3]) {\n      var day3 = match[DAY_GROUP_3];\n\n      if (day3 == '明' || day3 == '聽') {\n        startMoment.add(1, 'day');\n      } else if (day3 == '昨' || day3 == '尋' || day3 == '琴') {\n        startMoment.add(-1, 'day');\n      }\n\n      result.start.assign('day', startMoment.date());\n      result.start.assign('month', startMoment.month() + 1);\n      result.start.assign('year', startMoment.year());\n    } else {\n      result.start.imply('day', startMoment.date());\n      result.start.imply('month', startMoment.month() + 1);\n      result.start.imply('year', startMoment.year());\n    }\n\n    var hour = 0;\n    var minute = 0;\n    var meridiem = -1; // ----- Second\n\n    if (match[SECOND_GROUP]) {\n      var second = parseInt(match[SECOND_GROUP]);\n\n      if (isNaN(second)) {\n        second = util.zhStringToNumber(match[SECOND_GROUP]);\n      }\n\n      if (second >= 60) return null;\n      result.start.assign('second', second);\n    }\n\n    hour = parseInt(match[HOUR_GROUP]);\n\n    if (isNaN(hour)) {\n      hour = util.zhStringToNumber(match[HOUR_GROUP]);\n    } // ----- Minutes\n\n\n    if (match[MINUTE_GROUP]) {\n      if (match[MINUTE_GROUP] == '半') {\n        minute = 30;\n      } else if (match[MINUTE_GROUP] == '正' || match[MINUTE_GROUP] == '整') {\n        minute = 0;\n      } else {\n        minute = parseInt(match[MINUTE_GROUP]);\n\n        if (isNaN(minute)) {\n          minute = util.zhStringToNumber(match[MINUTE_GROUP]);\n        }\n      }\n    } else if (hour > 100) {\n      minute = hour % 100;\n      hour = parseInt(hour / 100);\n    }\n\n    if (minute >= 60) {\n      return null;\n    }\n\n    if (hour > 24) {\n      return null;\n    }\n\n    if (hour >= 12) {\n      meridiem = 1;\n    } // ----- AM & PM\n\n\n    if (match[AM_PM_HOUR_GROUP]) {\n      if (hour > 12) return null;\n      var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n\n      if (ampm == \"a\") {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      }\n\n      if (ampm == \"p\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {\n      var zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];\n      var zhAMPM1 = zhAMPMString1[0];\n\n      if (zhAMPM1 == '朝' || zhAMPM1 == '早') {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      } else if (zhAMPM1 == '晚') {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {\n      var zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];\n      var zhAMPM2 = zhAMPMString2[0];\n\n      if (zhAMPM2 == '上' || zhAMPM2 == '朝' || zhAMPM2 == '早' || zhAMPM2 == '凌') {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      } else if (zhAMPM2 == '下' || zhAMPM2 == '晏' || zhAMPM2 == '晚') {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {\n      var zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];\n      var zhAMPM3 = zhAMPMString3[0];\n\n      if (zhAMPM3 == '上' || zhAMPM3 == '朝' || zhAMPM3 == '早' || zhAMPM3 == '凌') {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      } else if (zhAMPM3 == '下' || zhAMPM3 == '晏' || zhAMPM3 == '晚') {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    }\n\n    result.start.assign('hour', hour);\n    result.start.assign('minute', minute);\n\n    if (meridiem >= 0) {\n      result.start.assign('meridiem', meridiem);\n    } else {\n      if (hour < 12) {\n        result.start.imply('meridiem', 0);\n      } else {\n        result.start.imply('meridiem', 1);\n      }\n    } // ==============================================================\n    //                  Extracting the 'to' chunk\n    // ==============================================================\n\n\n    match = SECOND_REG_PATTERN.exec(text.substring(result.index + result.text.length));\n\n    if (!match) {\n      // Not accept number only result\n      if (result.text.match(/^\\d+$/)) {\n        return null;\n      }\n\n      return result;\n    }\n\n    var endMoment = startMoment.clone();\n    result.end = new ParsedComponents(null, null); // ----- Day\n\n    if (match[DAY_GROUP_1]) {\n      var day1 = match[DAY_GROUP_1];\n\n      if (day1 == '明' || day1 == '聽') {\n        // Check not \"Tomorrow\" on late night\n        if (refMoment.hour() > 1) {\n          endMoment.add(1, 'day');\n        }\n      } else if (day1 == '昨' || day1 == '尋' || day1 == '琴') {\n        endMoment.add(-1, 'day');\n      }\n\n      result.end.assign('day', endMoment.date());\n      result.end.assign('month', endMoment.month() + 1);\n      result.end.assign('year', endMoment.year());\n    } else if (match[DAY_GROUP_3]) {\n      var day3 = match[DAY_GROUP_3];\n\n      if (day3 == '明' || day3 == '聽') {\n        endMoment.add(1, 'day');\n      } else if (day3 == '昨' || day3 == '尋' || day3 == '琴') {\n        endMoment.add(-1, 'day');\n      }\n\n      result.end.assign('day', endMoment.date());\n      result.end.assign('month', endMoment.month() + 1);\n      result.end.assign('year', endMoment.year());\n    } else {\n      result.end.imply('day', endMoment.date());\n      result.end.imply('month', endMoment.month() + 1);\n      result.end.imply('year', endMoment.year());\n    }\n\n    hour = 0;\n    minute = 0;\n    meridiem = -1; // ----- Second\n\n    if (match[SECOND_GROUP]) {\n      var second = parseInt(match[SECOND_GROUP]);\n\n      if (isNaN(second)) {\n        second = util.zhStringToNumber(match[SECOND_GROUP]);\n      }\n\n      if (second >= 60) return null;\n      result.end.assign('second', second);\n    }\n\n    hour = parseInt(match[HOUR_GROUP]);\n\n    if (isNaN(hour)) {\n      hour = util.zhStringToNumber(match[HOUR_GROUP]);\n    } // ----- Minutes\n\n\n    if (match[MINUTE_GROUP]) {\n      if (match[MINUTE_GROUP] == '半') {\n        minute = 30;\n      } else if (match[MINUTE_GROUP] == '正' || match[MINUTE_GROUP] == '整') {\n        minute = 0;\n      } else {\n        minute = parseInt(match[MINUTE_GROUP]);\n\n        if (isNaN(minute)) {\n          minute = util.zhStringToNumber(match[MINUTE_GROUP]);\n        }\n      }\n    } else if (hour > 100) {\n      minute = hour % 100;\n      hour = parseInt(hour / 100);\n    }\n\n    if (minute >= 60) {\n      return null;\n    }\n\n    if (hour > 24) {\n      return null;\n    }\n\n    if (hour >= 12) {\n      meridiem = 1;\n    } // ----- AM & PM\n\n\n    if (match[AM_PM_HOUR_GROUP]) {\n      if (hour > 12) return null;\n      var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n\n      if (ampm == \"a\") {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      }\n\n      if (ampm == \"p\") {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n\n      if (!result.start.isCertain('meridiem')) {\n        if (meridiem == 0) {\n          result.start.imply('meridiem', 0);\n\n          if (result.start.get('hour') == 12) {\n            result.start.assign('hour', 0);\n          }\n        } else {\n          result.start.imply('meridiem', 1);\n\n          if (result.start.get('hour') != 12) {\n            result.start.assign('hour', result.start.get('hour') + 12);\n          }\n        }\n      }\n    } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {\n      var zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];\n      var zhAMPM1 = zhAMPMString1[0];\n\n      if (zhAMPM1 == '朝' || zhAMPM1 == '早') {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      } else if (zhAMPM1 == '晚') {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {\n      var zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];\n      var zhAMPM2 = zhAMPMString2[0];\n\n      if (zhAMPM2 == '上' || zhAMPM2 == '朝' || zhAMPM2 == '早' || zhAMPM2 == '凌') {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      } else if (zhAMPM2 == '下' || zhAMPM2 == '晏' || zhAMPM2 == '晚') {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {\n      var zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];\n      var zhAMPM3 = zhAMPMString3[0];\n\n      if (zhAMPM3 == '上' || zhAMPM3 == '朝' || zhAMPM3 == '早' || zhAMPM3 == '凌') {\n        meridiem = 0;\n        if (hour == 12) hour = 0;\n      } else if (zhAMPM3 == '下' || zhAMPM3 == '晏' || zhAMPM3 == '晚') {\n        meridiem = 1;\n        if (hour != 12) hour += 12;\n      }\n    }\n\n    result.text = result.text + match[0];\n    result.end.assign('hour', hour);\n    result.end.assign('minute', minute);\n\n    if (meridiem >= 0) {\n      result.end.assign('meridiem', meridiem);\n    } else {\n      var startAtPM = result.start.isCertain('meridiem') && result.start.get('meridiem') == 1;\n\n      if (startAtPM && result.start.get('hour') > hour) {\n        // 10pm - 1 (am)\n        result.end.imply('meridiem', 0);\n      } else if (hour > 12) {\n        result.end.imply('meridiem', 1);\n      }\n    }\n\n    if (result.end.date().getTime() < result.start.date().getTime()) {\n      result.end.imply('day', result.end.get('day') + 1);\n    }\n\n    return result;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}