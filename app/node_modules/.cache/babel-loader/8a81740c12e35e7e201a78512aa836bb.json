{"ast":null,"code":"/*\n\n\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar PATTERN = new RegExp('(\\\\W|^)(' + 'jetzt|' + '(?:heute|diesen)\\\\s*(morgen|vormittag|mittag|nachmittag|abend)|' + '(?:heute|diese)\\\\s*nacht|' + 'heute|' + '(?:(?:ü|ue)ber)?morgen(?:\\\\s*(morgen|vormittag|mittag|nachmittag|abend|nacht))?|' + '(?:vor)?gestern(?:\\\\s*(morgen|vormittag|mittag|nachmittag|abend|nacht))?|' + 'letzte\\\\s*nacht' + ')(?=\\\\W|$)', 'i');\n\nexports.Parser = function DECasualDateParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var text = match[0].substr(match[1].length);\n    var index = match.index + match[1].length;\n    var result = new ParsedResult({\n      index: index,\n      text: text,\n      ref: ref\n    });\n    var refMoment = moment(ref);\n    var startMoment = refMoment.clone();\n    var lowerText = text.toLowerCase();\n\n    if (/(?:heute|diese)\\s*nacht/.test(lowerText)) {\n      // Normally means this coming midnight\n      result.start.imply('hour', 22);\n      result.start.imply('meridiem', 1);\n    } else if (/^(?:ü|ue)bermorgen/.test(lowerText)) {\n      startMoment.add(refMoment.hour() > 1 ? 2 : 1, 'day');\n    } else if (/^morgen/.test(lowerText)) {\n      // Check not \"Tomorrow\" on late night\n      if (refMoment.hour() > 1) {\n        startMoment.add(1, 'day');\n      }\n    } else if (/^gestern/.test(lowerText)) {\n      startMoment.add(-1, 'day');\n    } else if (/^vorgestern/.test(lowerText)) {\n      startMoment.add(-2, 'day');\n    } else if (/letzte\\s*nacht/.test(lowerText)) {\n      result.start.imply('hour', 0);\n\n      if (refMoment.hour() > 6) {\n        startMoment.add(-1, 'day');\n      }\n    } else if (lowerText === 'jetzt') {\n      result.start.imply('hour', refMoment.hour());\n      result.start.imply('minute', refMoment.minute());\n      result.start.imply('second', refMoment.second());\n      result.start.imply('millisecond', refMoment.millisecond());\n    }\n\n    var secondMatch = match[3] || match[4] || match[5];\n\n    if (secondMatch) {\n      switch (secondMatch.toLowerCase()) {\n        case 'morgen':\n          result.start.imply('hour', 6);\n          break;\n\n        case 'vormittag':\n          result.start.imply('hour', 9);\n          break;\n\n        case 'mittag':\n          result.start.imply('hour', 12);\n          break;\n\n        case 'nachmittag':\n          result.start.imply('hour', 15);\n          result.start.imply('meridiem', 1);\n          break;\n\n        case 'abend':\n          result.start.imply('hour', 18);\n          result.start.imply('meridiem', 1);\n          break;\n\n        case 'nacht':\n          result.start.imply('hour', 0);\n          break;\n      }\n    }\n\n    result.start.assign('day', startMoment.date());\n    result.start.assign('month', startMoment.month() + 1);\n    result.start.assign('year', startMoment.year());\n    result.tags['DECasualDateParser'] = true;\n    return result;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}