{"ast":null,"code":"/*\n    Enforce 'forwardDate' option to on the results. When there are missing component,\n    e.g. \"March 12-13 (without year)\" or \"Thursday\", the refiner will try to adjust the result\n    into the future instead of the past.\n*/\nvar moment = require('moment');\n\nvar Refiner = require('./refiner').Refiner;\n\nexports.Refiner = function ForwardDateRefiner() {\n  Refiner.call(this);\n\n  this.refine = function (text, results, opt) {\n    if (!opt['forwardDate'] && !opt['forwardDatesOnly']) {\n      return results;\n    }\n\n    results.forEach(function (result) {\n      var refMoment = moment(result.ref);\n\n      if (result.start.isCertain('day') && result.start.isCertain('month') && !result.start.isCertain('year') && refMoment.isAfter(result.start.moment())) {\n        // Adjust year into the future\n        for (var i = 0; i < 3 && refMoment.isAfter(result.start.moment()); i++) {\n          result.start.imply('year', result.start.get('year') + 1);\n\n          if (result.end && !result.end.isCertain('year')) {\n            result.end.imply('year', result.end.get('year') + 1);\n          }\n        }\n\n        result.tags['ExtractTimezoneOffsetRefiner'] = true;\n      }\n\n      if (!result.start.isCertain('day') && !result.start.isCertain('month') && !result.start.isCertain('year') && result.start.isCertain('weekday') && refMoment.isAfter(result.start.moment())) {\n        // Adjust date to the coming week\n        if (refMoment.day() > result.start.get('weekday')) {\n          refMoment.day(result.start.get('weekday') + 7);\n        } else {\n          refMoment.day(result.start.get('weekday'));\n        }\n\n        result.start.imply('day', refMoment.date());\n        result.start.imply('month', refMoment.month() + 1);\n        result.start.imply('year', refMoment.year());\n        result.tags['ExtractTimezoneOffsetRefiner'] = true;\n      }\n    });\n    return results;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}