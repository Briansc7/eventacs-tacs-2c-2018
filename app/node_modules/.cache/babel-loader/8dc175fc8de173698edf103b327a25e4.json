{"ast":null,"code":"/*\n\n\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar DAYS_OFFSET = {\n  'sonntag': 0,\n  'so': 0,\n  'montag': 1,\n  'mo': 1,\n  'dienstag': 2,\n  'di': 2,\n  'mittwoch': 3,\n  'mi': 3,\n  'donnerstag': 4,\n  'do': 4,\n  'freitag': 5,\n  'fr': 5,\n  'samstag': 6,\n  'sa': 6\n};\nvar PATTERN = new RegExp('(\\\\W|^)' + '(?:(?:\\\\,|\\\\(|\\\\（)\\\\s*)?' + '(?:a[mn]\\\\s*?)?' + '(?:(diese[mn]|letzte[mn]|n(?:ä|ae)chste[mn])\\\\s*)?' + '(' + Object.keys(DAYS_OFFSET).join('|') + ')' + '(?:\\\\s*(?:\\\\,|\\\\)|\\\\）))?' + '(?:\\\\s*(diese|letzte|n(?:ä|ae)chste)\\\\s*woche)?' + '(?=\\\\W|$)', 'i');\nvar PREFIX_GROUP = 2;\nvar WEEKDAY_GROUP = 3;\nvar POSTFIX_GROUP = 4;\n\nexports.Parser = function DEWeekdayParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var index = match.index + match[1].length;\n    var text = match[0].substr(match[1].length, match[0].length - match[1].length);\n    var result = new ParsedResult({\n      index: index,\n      text: text,\n      ref: ref\n    });\n    var dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n    var offset = DAYS_OFFSET[dayOfWeek];\n    if (offset === undefined) return null;\n    var startMoment = moment(ref);\n    var prefix = match[PREFIX_GROUP];\n    var postfix = match[POSTFIX_GROUP];\n    var refOffset = startMoment.day();\n    var norm = prefix || postfix;\n    norm = norm || '';\n    norm = norm.toLowerCase();\n\n    if (/letzte/.test(norm)) {\n      startMoment.day(offset - 7);\n    } else if (/n(?:ä|ae)chste/.test(norm)) {\n      startMoment.day(offset + 7);\n    } else if (/diese/.test(norm)) {\n      if (opt.forwardDatesOnly && refOffset > offset) {\n        startMoment.day(offset + 7);\n      } else {\n        startMoment.day(offset);\n      }\n    } else {\n      if (opt.forwardDatesOnly && refOffset > offset) {\n        startMoment.day(offset + 7);\n      } else if (!opt.forwardDatesOnly && Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {\n        startMoment.day(offset - 7);\n      } else if (!opt.forwardDatesOnly && Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {\n        startMoment.day(offset + 7);\n      } else {\n        startMoment.day(offset);\n      }\n    }\n\n    result.start.assign('weekday', offset);\n    result.start.imply('day', startMoment.date());\n    result.start.imply('month', startMoment.month() + 1);\n    result.start.imply('year', startMoment.year());\n    return result;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}