{"ast":null,"code":"/*\n\n\n*/\nvar moment = require('moment');\n\nvar Parser = require('../parser').Parser;\n\nvar ParsedResult = require('../../result').ParsedResult;\n\nvar DAYS_OFFSET = {\n  'sunday': 0,\n  'sun': 0,\n  'monday': 1,\n  'mon': 1,\n  'tuesday': 2,\n  'tues': 2,\n  'tue': 2,\n  'wednesday': 3,\n  'wed': 3,\n  'thursday': 4,\n  'thurs': 4,\n  'thur': 4,\n  'thu': 4,\n  'friday': 5,\n  'fri': 5,\n  'saturday': 6,\n  'sat': 6\n};\nvar PATTERN = new RegExp('(\\\\W|^)' + '(?:(?:\\\\,|\\\\(|\\\\（)\\\\s*)?' + '(?:on\\\\s*?)?' + '(?:(this|last|past|next)\\\\s*)?' + '(' + Object.keys(DAYS_OFFSET).join('|') + ')' + '(?:\\\\s*(?:\\\\,|\\\\)|\\\\）))?' + '(?:\\\\s*(this|last|past|next)\\\\s*week)?' + '(?=\\\\W|$)', 'i');\nvar PREFIX_GROUP = 2;\nvar WEEKDAY_GROUP = 3;\nvar POSTFIX_GROUP = 4;\n\nexports.updateParsedComponent = function updateParsedComponent(result, ref, offset, modifier) {\n  var startMoment = moment(ref);\n  var startMomentFixed = false;\n  var refOffset = startMoment.day();\n\n  if (modifier == 'last' || modifier == 'past') {\n    startMoment.day(offset - 7);\n    startMomentFixed = true;\n  } else if (modifier == 'next') {\n    startMoment.day(offset + 7);\n    startMomentFixed = true;\n  } else if (modifier == 'this') {\n    startMoment.day(offset);\n  } else {\n    if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {\n      startMoment.day(offset - 7);\n    } else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {\n      startMoment.day(offset + 7);\n    } else {\n      startMoment.day(offset);\n    }\n  }\n\n  result.start.assign('weekday', offset);\n\n  if (startMomentFixed) {\n    result.start.assign('day', startMoment.date());\n    result.start.assign('month', startMoment.month() + 1);\n    result.start.assign('year', startMoment.year());\n  } else {\n    result.start.imply('day', startMoment.date());\n    result.start.imply('month', startMoment.month() + 1);\n    result.start.imply('year', startMoment.year());\n  }\n\n  return result;\n};\n\nexports.Parser = function ENWeekdayParser() {\n  Parser.apply(this, arguments);\n\n  this.pattern = function () {\n    return PATTERN;\n  };\n\n  this.extract = function (text, ref, match, opt) {\n    var index = match.index + match[1].length;\n    var text = match[0].substr(match[1].length, match[0].length - match[1].length);\n    var result = new ParsedResult({\n      index: index,\n      text: text,\n      ref: ref\n    });\n    var dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n    var offset = DAYS_OFFSET[dayOfWeek];\n\n    if (offset === undefined) {\n      return null;\n    }\n\n    var prefix = match[PREFIX_GROUP];\n    var postfix = match[POSTFIX_GROUP];\n    var norm = prefix || postfix;\n    norm = norm || '';\n    norm = norm.toLowerCase();\n    exports.updateParsedComponent(result, ref, offset, norm);\n    result.tags['ENWeekdayParser'] = true;\n    return result;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}