{"ast":null,"code":"var parser = require('./parsers/parser');\n\nvar refiner = require('./refiners/refiner');\n\nexports.mergeOptions = function (options) {\n  var addedTypes = {};\n  var mergedOption = {\n    parsers: [],\n    refiners: []\n  };\n  options.forEach(function (option) {\n    if (option.call) {\n      option = option.call();\n    }\n\n    if (option.parsers) {\n      option.parsers.forEach(function (p) {\n        if (!addedTypes[p.constructor]) {\n          mergedOption.parsers.push(p);\n          addedTypes[p.constructor] = true;\n        }\n      });\n    }\n\n    if (option.refiners) {\n      option.refiners.forEach(function (r) {\n        if (!addedTypes[r.constructor]) {\n          mergedOption.refiners.push(r);\n          addedTypes[r.constructor] = true;\n        }\n      });\n    }\n  });\n  return mergedOption;\n};\n\nexports.commonPostProcessing = function () {\n  return {\n    refiners: [// These should be after all other refiners\n    new refiner.ExtractTimezoneOffsetRefiner(), new refiner.ExtractTimezoneAbbrRefiner(), new refiner.UnlikelyFormatFilter()]\n  };\n}; // -------------------------------------------------------------\n\n\nexports.strictOption = function () {\n  var strictConfig = {\n    strict: true\n  };\n  return exports.mergeOptions([exports.en(strictConfig), exports.de(strictConfig), exports.es(strictConfig), exports.fr(strictConfig), exports.ja(strictConfig), exports.zh, exports.commonPostProcessing]);\n};\n\nexports.casualOption = function () {\n  return exports.mergeOptions([exports.en.casual, // Some German abbriviate overlap with common English\n  exports.de({\n    strict: true\n  }), exports.es.casual, exports.fr.casual, exports.ja.casual, exports.zh, exports.commonPostProcessing]);\n}; // -------------------------------------------------------------\n\n\nexports.de = function (config) {\n  return {\n    parsers: [new parser.DEDeadlineFormatParser(config), new parser.DEMonthNameLittleEndianParser(config), new parser.DEMonthNameParser(config), new parser.DESlashDateFormatParser(config), new parser.DETimeAgoFormatParser(config), new parser.DETimeExpressionParser(config)],\n    refiners: [new refiner.OverlapRemovalRefiner(), new refiner.ForwardDateRefiner(), new refiner.DEMergeDateTimeRefiner(), new refiner.DEMergeDateRangeRefiner()]\n  };\n};\n\nexports.de.casual = function () {\n  var option = exports.de({\n    strict: false\n  });\n  option.parsers.unshift(new parser.DECasualDateParser());\n  option.parsers.unshift(new parser.DEWeekdayParser());\n  return option;\n}; // -------------------------------------------------------------\n\n\nexports.en = function (config) {\n  return {\n    parsers: [new parser.ENISOFormatParser(config), new parser.ENDeadlineFormatParser(config), new parser.ENMonthNameLittleEndianParser(config), new parser.ENMonthNameMiddleEndianParser(config), new parser.ENMonthNameParser(config), new parser.ENSlashDateFormatParser(config), new parser.ENSlashDateFormatStartWithYearParser(config), new parser.ENSlashMonthFormatParser(config), new parser.ENTimeAgoFormatParser(config), new parser.ENTimeFromNowFormatParser(config), new parser.ENTimeExpressionParser(config)],\n    refiners: [new refiner.OverlapRemovalRefiner(), new refiner.ForwardDateRefiner(), // English\n    new refiner.ENMergeDateTimeRefiner(), new refiner.ENMergeDateRangeRefiner(), new refiner.ENPrioritizeSpecificDateRefiner()]\n  };\n};\n\nexports.en.casual = function (config) {\n  config = config || {};\n  config.strict = false;\n  var option = exports.en(config); // EN\n\n  option.parsers.unshift(new parser.ENCasualDateParser());\n  option.parsers.unshift(new parser.ENCasualTimeParser());\n  option.parsers.unshift(new parser.ENWeekdayParser());\n  option.parsers.unshift(new parser.ENRelativeDateFormatParser());\n  return option;\n};\n\nexports.en_GB = function (config) {\n  config = config || {};\n  config.littleEndian = true;\n  return exports.en(config);\n};\n\nexports.en_GB.casual = function (config) {\n  config = config || {};\n  config.littleEndian = true;\n  return exports.en.casual(config);\n}; // -------------------------------------------------------------\n\n\nexports.ja = function () {\n  return {\n    parsers: [new parser.JPStandardParser()],\n    refiners: [new refiner.OverlapRemovalRefiner(), new refiner.ForwardDateRefiner(), new refiner.JPMergeDateRangeRefiner()]\n  };\n};\n\nexports.ja.casual = function () {\n  var option = exports.ja();\n  option.parsers.unshift(new parser.JPCasualDateParser());\n  return option;\n}; // -------------------------------------------------------------\n\n\nexports.es = function (config) {\n  return {\n    parsers: [new parser.ESTimeAgoFormatParser(config), new parser.ESDeadlineFormatParser(config), new parser.ESTimeExpressionParser(config), new parser.ESMonthNameLittleEndianParser(config), new parser.ESSlashDateFormatParser(config)],\n    refiners: [new refiner.OverlapRemovalRefiner(), new refiner.ForwardDateRefiner()]\n  };\n};\n\nexports.es.casual = function () {\n  var option = exports.es({\n    strict: false\n  });\n  option.parsers.unshift(new parser.ESCasualDateParser());\n  option.parsers.unshift(new parser.ESWeekdayParser());\n  return option;\n}; // -------------------------------------------------------------\n\n\nexports.fr = function (config) {\n  return {\n    parsers: [new parser.FRDeadlineFormatParser(config), new parser.FRMonthNameLittleEndianParser(config), new parser.FRSlashDateFormatParser(config), new parser.FRTimeAgoFormatParser(config), new parser.FRTimeExpressionParser(config)],\n    refiners: [new refiner.OverlapRemovalRefiner(), new refiner.ForwardDateRefiner(), new refiner.FRMergeDateRangeRefiner(), new refiner.FRMergeDateTimeRefiner()]\n  };\n};\n\nexports.fr.casual = function () {\n  var option = exports.fr({\n    strict: false\n  });\n  option.parsers.unshift(new parser.FRCasualDateParser());\n  option.parsers.unshift(new parser.FRWeekdayParser());\n  option.parsers.unshift(new parser.FRRelativeDateFormatParser());\n  return option;\n}; // -------------------------------------------------------------\n\n\nexports.zh = function () {\n  return {\n    parsers: [new parser.ZHHantDateParser(), new parser.ZHHantWeekdayParser(), new parser.ZHHantTimeExpressionParser(), new parser.ZHHantCasualDateParser(), new parser.ZHHantDeadlineFormatParser()],\n    refiners: [new refiner.OverlapRemovalRefiner(), new refiner.ForwardDateRefiner()]\n  };\n};","map":null,"metadata":{},"sourceType":"script"}